#!/usr/bin/env python3
import argparse
import os
import shutil
import subprocess
import sys

# neoSYCL installation path
NEOSYCL_DIR = "@CMAKE_INSTALL_PREFIX@"
# Clang installation path
CLANG_DIR = "@Clang_DIR@/../../clang/@LLVM_PACKAGE_VERSION@"
# VEOS installation path
VEOS_DIR = "@VEO_DIR@"

CLANG_INCLUDE_PATH = f"{CLANG_DIR}/include"
NEOSYCL_INCLUDE_PATH = f"{NEOSYCL_DIR}/include"

# Path to neoSYCL kernel outliner
KOUT = f"{NEOSYCL_DIR}/bin/kout"
# Path to device compiler
DEVICE_COMPILER = "nc++"
# Path to host compiler
HOST_COMPILER = os.getenv("HOST_COMPILER", "g++")
# Common flags for host and device compilers
COMMON_CFLAGS = f"-w -std=c++17 -I{NEOSYCL_INCLUDE_PATH}"
# Compiler flags for host compiler
HOST_CFLAGS = ""
# Compiler flags for device compiler
DEVICE_CFLAGS = "-shared -fpic -fopenmp"
# Optimization flags for host compiler
HOST_OPT_FLAGS = "-O3 -march=native"
# Optimization flags for device compiler
HOST_DEBUG_FLAGS = "-g -Wall -DDEBUG"
# Linker options for the host compiler
HOST_LIBS = "-ldl -lpthread"
# Optimization flags for cpu device compiler
CPU_DEVICE_OPT_FLAGS = "-O4 -finline-functions"
# Optimization flags for ve device compiler
VE_DEVICE_OPT_FLAGS = "-O4 -finline-functions -finline-max-depth=3 -finline-max-times=20"
# Debug flags for device compiler
DEVICE_DEBUG_FLAGS = "-g -Wall -DDEBUG"
# Linker options for the device compiler
DEVICE_LIBS = ""

# Define nsc++ options
parser = argparse.ArgumentParser(
    description="neoSYCL compilation helper",
    epilog="Unrecognized options are simply passed to compilers.",
)
parser.add_argument("file", help="SYCL source filename")
parser.add_argument(
    "--hcode",
    type=str,
    metavar="filename",
    help="specify the output host code filename",
)
parser.add_argument(
    "--dcode",
    type=str,
    metavar="filename",
    help="specify the output device code filename",
)
parser.add_argument(
    "--soname",
    type=str,
    metavar="filename",
    help="specify the output shared object filename",
)
parser.add_argument(
    "--device",
    type=str,
    choices=["ve", "cpu"],
    default="ve",
    help="specify the device to use",
)
parser.add_argument(
    "--debug", action="store_true", help="enable debug options"
)

# commandline options forwarded to the compiler
parser.add_argument("-o", type=str, default="a.out", help=argparse.SUPPRESS)
parser.add_argument("-B", type=str, help=argparse.SUPPRESS)
parser.add_argument("-x", type=str, default="c++", help=argparse.SUPPRESS)
parser.add_argument("-Xassembler", type=str, help=argparse.SUPPRESS)
parser.add_argument("-Xpreprocessor", type=str, help=argparse.SUPPRESS)
parser.add_argument("-Xlinker", type=str, help=argparse.SUPPRESS)

parser.add_argument("--deviceargs",
        nargs=1,
        type=str,
        help="specify the option of the device compiler")

parser.add_argument("--cpuargs",
        nargs=1,
        type=str,
        help="specify the option of the host compiler")

parser.add_argument("--neosyclinclude",
        nargs=1,
        type=str,
        help="specify the path of neosycl's include files")

args, unknown = parser.parse_known_args()

name, ext = os.path.splitext(os.path.basename(args.file))
if ext not in {".cpp", ".cc", ".C"}:
    print("unknown file ext: ", ext)
    exit(1)

if args.hcode is None:
    args.hcode = f"{name}-host{ext}"

if args.dcode is None:
    args.dcode = f"{name}-device{ext}"

if args.soname is None:
    if args.device =="ve":
        args.soname = "kernel-ve.so"
    elif args.device == "cpu":
        args.soname = "kernel.so"

if args.device =="ve":
    DEVICE_COMPILER = os.getenv("DEVICE_COMPILER", "nc++")
    COMMON_CFLAGS += " -DBUILD_VE -DUSE_VE -I@VEO_HEADER_PATH@"
    HOST_LIBS += " -L@VEO_LIB_PATH@ -Wl,-rpath=@VEO_LIB_PATH@ -lveo"
elif args.device == "cpu":
    DEVICE_COMPILER = os.getenv("DEVICE_COMPILER", "g++")
    COMMON_CFLAGS += " -DUSE_CPU"

list_neosyclinclude_args = args.neosyclinclude
if list_neosyclinclude_args:
    COMMON_CFLAGS = "-I" + ','.join(list_neosyclinclude_args) + " " + COMMON_CFLAGS

# Run kernel outliner
kout_command = [
    KOUT, args.file,
    f"--host {args.hcode}",
    f"--device {args.dcode}",
    "--",
    COMMON_CFLAGS,
    HOST_CFLAGS,
    f"-I{CLANG_INCLUDE_PATH}"
] + unknown

kout_command = " ".join(kout_command)

print(kout_command)

try:
    subprocess.run(kout_command, shell=True, check=True)
except subprocess.CalledProcessError as e:
    print("kout failed")
    exit(e.returncode)

# Run clang-format
if shutil.which("clang-format"):
    try:
        subprocess.run(f"clang-format -i {args.hcode}", shell=True, check=True)
        subprocess.run(f"clang-format -i {args.dcode}", shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print("clang-format failed")
        exit(e.returncode)

# Run host compiler
host_command = [
    HOST_COMPILER,
    args.hcode,
    COMMON_CFLAGS,
    HOST_CFLAGS,
    HOST_LIBS,
    f"-o {args.o}",
] + unknown

if args.debug:
    host_command += [HOST_DEBUG_FLAGS]
else:
    host_command += [HOST_OPT_FLAGS]

list_host_args = args.cpuargs
if list_host_args:
    host_command += list_host_args

host_command = " ".join(host_command)

print(host_command)

try:
    subprocess.run(host_command, shell=True, check=True)
except subprocess.CalledProcessError as e:
    print("host code compilation failed")
    exit(e.returncode)

# Run device compiler
device_command = [
    DEVICE_COMPILER,
    args.dcode,
    COMMON_CFLAGS,
    DEVICE_CFLAGS,
    DEVICE_LIBS,
    f"-o {args.soname}",
] + unknown

if args.debug:
    device_command += [DEVICE_DEBUG_FLAGS]
elif args.device =="cpu":
    device_command += [CPU_DEVICE_OPT_FLAGS]
else:
    device_command += [VE_DEVICE_OPT_FLAGS]

list_device_args = args.deviceargs
if list_device_args:
    device_command += list_device_args

device_command = " ".join(device_command)

print(device_command)
try:
    subprocess.run(device_command, shell=True, check=True)
except subprocess.CalledProcessError as e:
    print("deive code compilation failed")
    exit(e.returncode)
